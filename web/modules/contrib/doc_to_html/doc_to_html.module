<?php

/**
 * @file
 * Contains doc_to_html.module..
 * Created by Giorgio Pagano
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\ContentEntityForm;
use Drupal\Core\Form\FormStateInterface;



/**
 * Implements hook_help().
 */
function doc_to_html_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the doc_to_html module.
    case 'help.page.doc_to_html':
      $output = '<h3> <strong>' . t('INTRODUCTION') . '</strong></h3> ';
      $output .= '<p> <span style="font-family:verdana,geneva,sans-serif">' . t('This module converts doc or docx to html data, the result will be stored in a content type field (chosen by administration site or specific role).') . '</span></p>';
      $output .= '<p>' . t('After this process the file converted and doc will be deleted.') . '</p>';
      $output .= '<h3><strong>' . t('INSTALLATION') . '</strong></h3>';
      $output .= '<ul>';
      $output .= '<li>' . t('LibreOffice');
      $output .= '<pre>' . t('- Open Your Linux Terminal') . '<br/>' . t('- Execute command :') . '<br/>' . t('- sudo apt-get install libreoffice') . '</pre>';
      $output .= '<pre>' . t('If you have a problem with this library remove and reinstall it:') . '</pre>';
      $output .= '<pre>' . t('- Execute command :') . '<br/>' . t('- sudo apt-get remove --purge libreoffice*') . '<br/>' . t('- sudo apt-get clean') . '<br/>' . t('- sudo apt-get autoremove') . '<br/>' . t('- sudo apt-get install libreoffice') . '</pre>';
      $output .= '</li>';
      $output .= '<li>' . t('Module') . '<pre>' . t('- Enable module') . '</pre></li>';
      $output .= '</ul>';
      $output .= '<h3><strong>' . t('CONFIGURATION') . '</strong></h3>';
      $output .= '<ul>';
      $output .= '<li>' . t('Veryify libreoffice') . '<pre>' . t('- Go to admin/reports/status') . '<br />' . t('- Find voice DOC to HTML -&gt; Libreoffice') . '<br />' . t('- IF the installation done at right show the version of library') . '</pre>';
      $output .= '</li>';
      $output .= '<li>' . t('DOC TO HTML') . '<br />' . t('The module provide tree tab at path:');
      $output .= ' /admin/config/content/doc_to_html';
      $output .= '<ul>';
      $output .= '<li>' . t('IMPORT TO FIELD') . '<br />';
      $output .= '<pre>' . t('In this tab have a list of content type with, if this content type has a "text long" or "text long with summary" field of type, the system shows a checkbox and REGEX filter, use this information to store html data.') . '<br/><br/>' . t('Important :this setting provide to add an extra field file at content type, by default all field unchecked.') . '</pre>';
      $output .= '</li>';
      $output .= '<li>' . t('BASIC SETTINGS');
      $output .= '<pre>' . t('PATH TO SAVE HTML FILE') . '<br/>' . t('- define a temporary folder to store file, this parameters is preset at installation.') . '<br/>' . t('PARSE DATA') . '<br/>' . t('- Execute UTF-8 Encode on html data') . '<br/>' . t('- Execute Regex to extract only body content without head and other tags') . '</pre>';
      $output .= '</li>';
      $output .= '<li>' . t('LIBREOFFICE SETTINGS') . '<br />';
      $output .= t('The settings to execute Libreoffice from command line, the module detect OS and preload basic settings:');
      $output .= '<pre>' . t('- Base Path Application') . '<br/>' . t('The Base path of Libreoffice.');
      $output .= '<br/>' . t('- Command') . '<br/>' . t('main key from execute libreoffice') . '</pre>';
      $output .= '</li>';
      $output .= '</ul>';
      $output .= '</li>';
      $output .= '</ul>';
      $output .= '<pre>' . t('The settings to execute Libreoffice from command line, the module detect OS and preload basic settings:') . '<br/>' . t('- Base Path Application') . '<br/>' . t('The Base path of Libreoffice.') . '<br/>' . t('- Command') . ' <br/>' . t('main key from libreoffice') . '</pre>';
      $output .= '<h3><strong>' . t('AUTHOR/MAINTAINER') . '</strong></h3>';
      $output .= '<pre>' . t('* Giorgio A. Pagano (sjpagan) - https://www.drupal.org/user/3164127') . '</pre>';
      return $output;
    default:
  }
}

/**
 * Implements hook_form_alter() on behalf of doc_to_html.module.
 */
function doc_to_html_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $enable_validate = FALSE;

  // Get Bundle Name.
  $bundle = FALSE;
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof ContentEntityForm) {
    $bundle = $form_object->getEntity()->bundle();

    // Get Config settings.
    $config_name = \Drupal::service('doc_to_html.settings')
      ->GetEntityBundleFieldBy('text_with_summary');

    // Each all configuration.
    $config_field = \Drupal::configFactory()->getEditable('doc_to_html.importtofield');
    $doc_to_html_upload_folder =  \Drupal::config('doc_to_html.basicsettings')->get('doc_to_html_folder');
    $doc_to_html_upload_folder = 'public://'.$doc_to_html_upload_folder;
    $supportted_file =  \Drupal::service('doc_to_html.settings')->getSupporttedFile();

    // Get LibreofficeVersion.
    $libreOfficeVersion = \Drupal::service('doc_to_html.cmd');
    $version = $libreOfficeVersion->GetLibreOfficeVersion();
    foreach ($config_name as $key => $config_item) {

      // Check if config_item Bundle exist.
      if (isset($config_item['bundle']) && !empty($config_item['bundle'])) {

        // Verify in config have current bundle.
        if ($config_item['bundle'] == $bundle) {

          // Check if field exist and $version is present.
          // @TODO show message library is not preset.
          if ($config_field->get($key . '-field') == 1 && $version) {
            $field_name = $config_item['field_name'];
            $field_label = $config_item['field_label'];
            $current_weight = $form[$field_name]['#weight'];
            $current_weight++;

            // Define Field File under textarea to import markup.
            $form[$field_name]['doc_to_html-file-|-'.$key.'-|-'.$field_name] = [
              '#type' => 'managed_file',
              '#title' => t('Doc File To import in '.$field_label),
              '#description' => t(''),
              '#weight' => $current_weight,
              '#upload_location' => $doc_to_html_upload_folder,
              "#upload_validators" => array(
                "file_validate_extensions" => $supportted_file,
              ),
            ];
            if(!$enable_validate){

              // Add Single validate
              if(!in_array('doc_to_html_form_validate',$form['#validate'] )){
                $form['#validate'][] = 'doc_to_html_form_validate';
              }
            }
          }
        }
      }
    }
  }
}

/**
 * @param $form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state.
 */
function doc_to_html_form_validate(&$form, FormStateInterface &$form_state){

  $cleanFolder = FALSE;
  $config_field = \Drupal::configFactory()->getEditable('doc_to_html.importtofield');

  //@TODO Show library ins not present.

  $values = $form_state->getValues();
  foreach($values as $key => $fid){
    if(strpos($key,'doc_to_html-file') !== false){
      $fid = reset($fid);
      if($fid != ''){
        $markup = '';
        $doc_to_html_info = explode('-|-',$key);
        $extra_regex_filter = $config_field->get($doc_to_html_info[1].'-regex_filter');
        $field_name = $doc_to_html_info[2];

        // Convert to HTML.
        // Parse to UTF8.
        // Get content of tag body.
        \Drupal::service('doc_to_html.cmd')->convertTo($markup, $fid, $extra_regex_filter);

        // Create array to import markup in field.
        $field_value = array (
          array (
            'summary' =>'',
            'value' => $markup,
            'format' => 'full_html'
          )) ;

        // Set value.
        $form_state->setValue($field_name,$field_value);

        // Use this marker to clean folder.
        if(!$cleanFolder){
          $cleanFolder = TRUE;
        }
      }
    }
  }

  // Run service to remove all file in doc_to_html folder.
  if($cleanFolder){
    \Drupal::service('doc_to_html.files')->cleanFolder();
  }
}